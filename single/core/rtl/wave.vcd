$version Generated by VerilatedVcd $end
$date Wed Jan  4 00:04:21 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 '" clk $end
  $var wire  1 (" reset $end
  $scope module cpu $end
   $var wire 64 # IF_pc [63:0] $end
   $var wire  1 '" clk $end
   $var wire 15 6 id_alu_info [14:0] $end
   $var wire  6 7 id_branch_info [5:0] $end
   $var wire  6 9 id_csr_info [5:0] $end
   $var wire  1 = id_ebreak $end
   $var wire  1 < id_ecall $end
   $var wire  1 ." id_ilegl_inst $end
   $var wire 64 : id_imm [63:0] $end
   $var wire 11 8 id_ld_st_info [10:0] $end
   $var wire  1 > id_mret $end
   $var wire 12 5 id_opcode_info [11:0] $end
   $var wire  1 3 id_rd_en $end
   $var wire  5 4 id_rd_idx [4:0] $end
   $var wire  1 , id_rs1_en $end
   $var wire  5 ( id_rs1_idx [4:0] $end
   $var wire 64 *" id_rs1_rdata [63:0] $end
   $var wire  1 - id_rs2_en $end
   $var wire  5 . id_rs2_idx [4:0] $end
   $var wire 64 ," id_rs2_rdata [63:0] $end
   $var wire  1 )" if_bus_err $end
   $var wire 32 + if_instr [31:0] $end
   $var wire  1 ' if_jalr_rs1_en $end
   $var wire  5 ( if_jalr_rs1_idx [4:0] $end
   $var wire  1 )" if_pc_misalign $end
   $var wire 64 % if_pc_next [63:0] $end
   $var wire  1 (" reset $end
   $var wire 64 ) rf_jalr_rs1_rdata [63:0] $end
   $var wire 64 / rf_rs1_rdata [63:0] $end
   $var wire 64 1 rf_rs2_rdata [63:0] $end
   $scope module id_u $end
    $var wire  3 T fun3 [2:0] $end
    $var wire  7 U fun7 [6:0] $end
    $var wire 15 6 id_alu_info_o [14:0] $end
    $var wire  6 7 id_branch_info_o [5:0] $end
    $var wire  6 9 id_csr_info_o [5:0] $end
    $var wire  1 = id_ebreak_o $end
    $var wire  1 < id_ecall_o $end
    $var wire  1 ." id_ilegl_instr_o $end
    $var wire 64 : id_imm_o [63:0] $end
    $var wire 11 8 id_ld_st_info_o [10:0] $end
    $var wire  1 > id_mret_o $end
    $var wire 12 5 id_opcode_info_o [11:0] $end
    $var wire  1 3 id_rd_en_o $end
    $var wire  5 4 id_rd_idx_o [4:0] $end
    $var wire  1 , id_rs1_en_o $end
    $var wire  5 ( id_rs1_idx_o [4:0] $end
    $var wire 64 *" id_rs1_rdata_o [63:0] $end
    $var wire  1 - id_rs2_en_o $end
    $var wire  5 . id_rs2_idx_o [4:0] $end
    $var wire 64 ," id_rs2_rdata_o [63:0] $end
    $var wire 32 + instr_i [31:0] $end
    $var wire  7 S opcode [6:0] $end
    $var wire  5 4 rd [4:0] $end
    $var wire 64 / rf_rs1_rdata_i [63:0] $end
    $var wire 64 1 rf_rs2_rdata_i [63:0] $end
    $var wire  5 ( rs1 [4:0] $end
    $var wire  5 . rs2 [4:0] $end
    $var wire  1 o rv64_add $end
    $var wire  1 b rv64_addi $end
    $var wire  1 c rv64_addiw $end
    $var wire  1 p rv64_addw $end
    $var wire  1 X rv64_alu $end
    $var wire  1 V rv64_alu_imm $end
    $var wire  1 W rv64_alu_imm_w $end
    $var wire  1 Y rv64_alu_w $end
    $var wire  1 } rv64_and $end
    $var wire  1 n rv64_andi $end
    $var wire  1 ` rv64_auipc $end
    $var wire 64 ;! rv64_b_imm [63:0] $end
    $var wire  1 ~ rv64_beq $end
    $var wire  1 #! rv64_bge $end
    $var wire  1 %! rv64_bgeu $end
    $var wire  1 "! rv64_blt $end
    $var wire  1 $! rv64_bltu $end
    $var wire  1 !! rv64_bne $end
    $var wire  1 Z rv64_branch $end
    $var wire  1 3! rv64_csrrc $end
    $var wire  1 E! rv64_csrrci $end
    $var wire  1 2! rv64_csrrs $end
    $var wire  1 D! rv64_csrrsi $end
    $var wire  1 1! rv64_csrrw $end
    $var wire  1 C! rv64_csrrwi $end
    $var wire  1 = rv64_ebreak $end
    $var wire  1 < rv64_ecall $end
    $var wire 64 7! rv64_i_imm [63:0] $end
    $var wire 64 : rv64_imm [63:0] $end
    $var wire  1 Z rv64_imm_sel_b $end
    $var wire  1 A! rv64_imm_sel_i $end
    $var wire  1 [ rv64_imm_sel_j $end
    $var wire  1 ^ rv64_imm_sel_s $end
    $var wire  1 B! rv64_imm_sel_u $end
    $var wire 64 =! rv64_j_imm [63:0] $end
    $var wire  1 [ rv64_jal $end
    $var wire  1 \ rv64_jalr $end
    $var wire  1 &! rv64_lb $end
    $var wire  1 *! rv64_lbu $end
    $var wire  1 )! rv64_ld $end
    $var wire  1 '! rv64_lh $end
    $var wire  1 +! rv64_lhu $end
    $var wire  1 ] rv64_load $end
    $var wire  1 _ rv64_lui $end
    $var wire  1 (! rv64_lw $end
    $var wire  1 ,! rv64_lwu $end
    $var wire  1 > rv64_mret $end
    $var wire  1 3 rv64_need_rd $end
    $var wire  1 , rv64_need_rs1 $end
    $var wire  1 - rv64_need_rs2 $end
    $var wire  1 | rv64_or $end
    $var wire  1 m rv64_ori $end
    $var wire 64 9! rv64_s_imm [63:0] $end
    $var wire  1 -! rv64_sb $end
    $var wire  1 0! rv64_sd $end
    $var wire  1 .! rv64_sh $end
    $var wire  1 s rv64_sll $end
    $var wire  1 d rv64_slli $end
    $var wire  1 e rv64_slliw $end
    $var wire  1 t rv64_sllw $end
    $var wire  1 u rv64_slt $end
    $var wire  1 f rv64_slti $end
    $var wire  1 v rv64_sltu $end
    $var wire  1 g rv64_sltui $end
    $var wire  1 z rv64_sra $end
    $var wire  1 k rv64_srai $end
    $var wire  1 l rv64_sraiw $end
    $var wire  1 { rv64_sraw $end
    $var wire  1 x rv64_srl $end
    $var wire  1 i rv64_srli $end
    $var wire  1 j rv64_srliw $end
    $var wire  1 y rv64_srlw $end
    $var wire  1 ^ rv64_store $end
    $var wire  1 q rv64_sub $end
    $var wire  1 r rv64_subw $end
    $var wire  1 /! rv64_sw $end
    $var wire  1 a rv64_system $end
    $var wire 64 ?! rv64_u_imm [63:0] $end
    $var wire  1 w rv64_xor $end
    $var wire  1 h rv64_xori $end
   $upscope $end
   $scope module instr_fetch_u $end
    $var wire  1 C bj $end
    $var wire 64 D bj_pc_op1 [63:0] $end
    $var wire 64 A bj_pc_op2 [63:0] $end
    $var wire  1 )" if_bus_err_o $end
    $var wire 32 + if_instr_o [31:0] $end
    $var wire  1 ' if_jalr_rs1_en_o $end
    $var wire  5 ( if_jalr_rs1_idx_o [4:0] $end
    $var wire  1 )" if_pc_misalign_o $end
    $var wire 64 % if_pc_next_o [63:0] $end
    $var wire 64 ) jalr_rs1_rdata_i [63:0] $end
    $var wire  1 @ mini_dec_branch $end
    $var wire 64 A mini_dec_imm [63:0] $end
    $var wire  1 ? mini_dec_jal $end
    $var wire  1 ' mini_dec_jalr $end
    $var wire 64 F pc_add_op1 [63:0] $end
    $var wire 64 H pc_add_op2 [63:0] $end
    $var wire 64 # pc_i [63:0] $end
    $scope module if_bus_u $end
     $var wire  1 )" if_bus_bus_err_o $end
     $var wire 32 + if_bus_instr_o [31:0] $end
     $var wire  1 )" if_bus_pc_misalign_o $end
     $var wire 10 J pc [9:0] $end
     $var wire 64 # pc_i [63:0] $end
    $upscope $end
    $scope module if_mini_dec_u $end
     $var wire 32 + instr_i [31:0] $end
     $var wire  1 @ mini_dec_branch_o $end
     $var wire 64 A mini_dec_imm_o [63:0] $end
     $var wire  1 ? mini_dec_jal_o $end
     $var wire  1 ' mini_dec_jalr_o $end
     $var wire  5 ( mini_dec_jalr_rs1_idx_o [4:0] $end
     $var wire 12 K opcode_info [11:0] $end
     $scope module idu $end
      $var wire  3 T fun3 [2:0] $end
      $var wire  7 U fun7 [6:0] $end
      $var wire 15 N id_alu_info_o [14:0] $end
      $var wire  6 7 id_branch_info_o [5:0] $end
      $var wire  6 P id_csr_info_o [5:0] $end
      $var wire  1 R id_ebreak_o $end
      $var wire  1 Q id_ecall_o $end
      $var wire  1 :" id_ilegl_instr_o $end
      $var wire 64 A id_imm_o [63:0] $end
      $var wire 11 O id_ld_st_info_o [10:0] $end
      $var wire  1 > id_mret_o $end
      $var wire 12 K id_opcode_info_o [11:0] $end
      $var wire  1 M id_rd_en_o $end
      $var wire  5 4 id_rd_idx_o [4:0] $end
      $var wire  1 L id_rs1_en_o $end
      $var wire  5 ( id_rs1_idx_o [4:0] $end
      $var wire 64 6" id_rs1_rdata_o [63:0] $end
      $var wire  1 - id_rs2_en_o $end
      $var wire  5 . id_rs2_idx_o [4:0] $end
      $var wire 64 8" id_rs2_rdata_o [63:0] $end
      $var wire 32 + instr_i [31:0] $end
      $var wire  7 S opcode [6:0] $end
      $var wire  5 4 rd [4:0] $end
      $var wire 64 2" rf_rs1_rdata_i [63:0] $end
      $var wire 64 4" rf_rs2_rdata_i [63:0] $end
      $var wire  5 ( rs1 [4:0] $end
      $var wire  5 . rs2 [4:0] $end
      $var wire  1 o rv64_add $end
      $var wire  1 b rv64_addi $end
      $var wire  1 c rv64_addiw $end
      $var wire  1 p rv64_addw $end
      $var wire  1 X rv64_alu $end
      $var wire  1 V rv64_alu_imm $end
      $var wire  1 W rv64_alu_imm_w $end
      $var wire  1 Y rv64_alu_w $end
      $var wire  1 } rv64_and $end
      $var wire  1 n rv64_andi $end
      $var wire  1 ` rv64_auipc $end
      $var wire 64 ;! rv64_b_imm [63:0] $end
      $var wire  1 ~ rv64_beq $end
      $var wire  1 #! rv64_bge $end
      $var wire  1 %! rv64_bgeu $end
      $var wire  1 "! rv64_blt $end
      $var wire  1 $! rv64_bltu $end
      $var wire  1 !! rv64_bne $end
      $var wire  1 Z rv64_branch $end
      $var wire  1 3! rv64_csrrc $end
      $var wire  1 6! rv64_csrrci $end
      $var wire  1 2! rv64_csrrs $end
      $var wire  1 5! rv64_csrrsi $end
      $var wire  1 1! rv64_csrrw $end
      $var wire  1 4! rv64_csrrwi $end
      $var wire  1 R rv64_ebreak $end
      $var wire  1 Q rv64_ecall $end
      $var wire 64 7! rv64_i_imm [63:0] $end
      $var wire 64 A rv64_imm [63:0] $end
      $var wire  1 Z rv64_imm_sel_b $end
      $var wire  1 A! rv64_imm_sel_i $end
      $var wire  1 [ rv64_imm_sel_j $end
      $var wire  1 ^ rv64_imm_sel_s $end
      $var wire  1 B! rv64_imm_sel_u $end
      $var wire 64 =! rv64_j_imm [63:0] $end
      $var wire  1 [ rv64_jal $end
      $var wire  1 \ rv64_jalr $end
      $var wire  1 &! rv64_lb $end
      $var wire  1 *! rv64_lbu $end
      $var wire  1 )! rv64_ld $end
      $var wire  1 '! rv64_lh $end
      $var wire  1 +! rv64_lhu $end
      $var wire  1 ] rv64_load $end
      $var wire  1 _ rv64_lui $end
      $var wire  1 (! rv64_lw $end
      $var wire  1 ,! rv64_lwu $end
      $var wire  1 > rv64_mret $end
      $var wire  1 M rv64_need_rd $end
      $var wire  1 L rv64_need_rs1 $end
      $var wire  1 - rv64_need_rs2 $end
      $var wire  1 | rv64_or $end
      $var wire  1 m rv64_ori $end
      $var wire 64 9! rv64_s_imm [63:0] $end
      $var wire  1 -! rv64_sb $end
      $var wire  1 0! rv64_sd $end
      $var wire  1 .! rv64_sh $end
      $var wire  1 s rv64_sll $end
      $var wire  1 d rv64_slli $end
      $var wire  1 e rv64_slliw $end
      $var wire  1 t rv64_sllw $end
      $var wire  1 u rv64_slt $end
      $var wire  1 f rv64_slti $end
      $var wire  1 v rv64_sltu $end
      $var wire  1 g rv64_sltui $end
      $var wire  1 z rv64_sra $end
      $var wire  1 k rv64_srai $end
      $var wire  1 l rv64_sraiw $end
      $var wire  1 { rv64_sraw $end
      $var wire  1 x rv64_srl $end
      $var wire  1 i rv64_srli $end
      $var wire  1 j rv64_srliw $end
      $var wire  1 y rv64_srlw $end
      $var wire  1 ^ rv64_store $end
      $var wire  1 q rv64_sub $end
      $var wire  1 r rv64_subw $end
      $var wire  1 /! rv64_sw $end
      $var wire  1 a rv64_system $end
      $var wire 64 ?! rv64_u_imm [63:0] $end
      $var wire  1 w rv64_xor $end
      $var wire  1 h rv64_xori $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module pc_reg_u $end
    $var wire 64 # IF_pc_o [63:0] $end
    $var wire  1 '" clk $end
    $var wire  1 /" ena $end
    $var wire 64 % pc_next_i [63:0] $end
    $var wire  1 (" rst $end
    $scope module pc_dff $end
     $var wire 32 0" DATA_WIDTH [31:0] $end
     $var wire 32 1" RESET_VAL [31:0] $end
     $var wire  1 '" clk $end
     $var wire 64 % d [63:0] $end
     $var wire  1 /" ena $end
     $var wire 64 # q [63:0] $end
     $var wire 64 # q_r [63:0] $end
     $var wire  1 (" rst $end
    $upscope $end
   $upscope $end
   $scope module regfile_u $end
    $var wire  1 '" clk $end
    $var wire 32 &" i [31:0] $end
    $var wire  1 ' jalr_rs1_en_i $end
    $var wire  5 ( jalr_rs1_idx_i [4:0] $end
    $var wire  1 ;" rd_en_i $end
    $var wire  5 <" rd_idx_i [4:0] $end
    $var wire 64 =" rd_wdata_i [63:0] $end
    $var wire 64 F! reg_data(1) [63:0] $end
    $var wire 64 X! reg_data(10) [63:0] $end
    $var wire 64 Z! reg_data(11) [63:0] $end
    $var wire 64 \! reg_data(12) [63:0] $end
    $var wire 64 ^! reg_data(13) [63:0] $end
    $var wire 64 `! reg_data(14) [63:0] $end
    $var wire 64 b! reg_data(15) [63:0] $end
    $var wire 64 d! reg_data(16) [63:0] $end
    $var wire 64 f! reg_data(17) [63:0] $end
    $var wire 64 h! reg_data(18) [63:0] $end
    $var wire 64 j! reg_data(19) [63:0] $end
    $var wire 64 H! reg_data(2) [63:0] $end
    $var wire 64 l! reg_data(20) [63:0] $end
    $var wire 64 n! reg_data(21) [63:0] $end
    $var wire 64 p! reg_data(22) [63:0] $end
    $var wire 64 r! reg_data(23) [63:0] $end
    $var wire 64 t! reg_data(24) [63:0] $end
    $var wire 64 v! reg_data(25) [63:0] $end
    $var wire 64 x! reg_data(26) [63:0] $end
    $var wire 64 z! reg_data(27) [63:0] $end
    $var wire 64 |! reg_data(28) [63:0] $end
    $var wire 64 ~! reg_data(29) [63:0] $end
    $var wire 64 J! reg_data(3) [63:0] $end
    $var wire 64 "" reg_data(30) [63:0] $end
    $var wire 64 $" reg_data(31) [63:0] $end
    $var wire 64 L! reg_data(4) [63:0] $end
    $var wire 64 N! reg_data(5) [63:0] $end
    $var wire 64 P! reg_data(6) [63:0] $end
    $var wire 64 R! reg_data(7) [63:0] $end
    $var wire 64 T! reg_data(8) [63:0] $end
    $var wire 64 V! reg_data(9) [63:0] $end
    $var wire  1 (" reset $end
    $var wire 64 ) rf_jalr_rs1_rdata_o [63:0] $end
    $var wire 64 / rf_rs1_rdata_o [63:0] $end
    $var wire 64 1 rf_rs2_rdata_o [63:0] $end
    $var wire  1 , rs1_en_i $end
    $var wire  5 ( rs1_idx_i [4:0] $end
    $var wire  1 - rs2_en_i $end
    $var wire  5 . rs2_idx_i [4:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000000000000000000000000000000000000000000000000000 #
b0000000000000000000000000000000000000000000000000000000000000100 %
0'
b00111 (
b0000000000000000000000000000000000000000000000000000000000000000 )
b00000000001000111000001110010011 +
1,
0-
b00010 .
b0000000000000000000000000000000000000000000000000000000000000000 /
b0000000000000000000000000000000000000000000000000000000000000000 1
13
b00111 4
b100000000000 5
b100000000000000 6
b000000 7
b00000000000 8
b000000 9
b0000000000000000000000000000000000000000000000000000000000000010 :
0<
0=
0>
0?
0@
b0000000000000000000000000000000000000000000000000000000000000010 A
0C
b0000000000000000000000000000000000000000000000000000000000000000 D
b0000000000000000000000000000000000000000000000000000000000000000 F
b0000000000000000000000000000000000000000000000000000000000000100 H
b0000000000 J
b100000000000 K
1L
1M
b100000000000000 N
b00000000000 O
b000000 P
0Q
0R
b0010011 S
b000 T
b0000000 U
1V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
1b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0~
0!!
0"!
0#!
0$!
0%!
0&!
0'!
0(!
0)!
0*!
0+!
0,!
0-!
0.!
0/!
00!
01!
02!
03!
04!
05!
06!
b0000000000000000000000000000000000000000000000000000000000000010 7!
b0000000000000000000000000000000000000000000000000000000000000111 9!
b0000000000000000000000000000000000000000000000000000100000000110 ;!
b0000000000000000000000000000000000000000000000111000000000000010 =!
b0000000000000000000000000000000000000000001000111000000000000000 ?!
1A!
0B!
0C!
0D!
0E!
b0000000000000000000000000000000000000000000000000000000000000000 F!
b0000000000000000000000000000000000000000000000000000000000000000 H!
b0000000000000000000000000000000000000000000000000000000000000000 J!
b0000000000000000000000000000000000000000000000000000000000000000 L!
b0000000000000000000000000000000000000000000000000000000000000000 N!
b0000000000000000000000000000000000000000000000000000000000000000 P!
b0000000000000000000000000000000000000000000000000000000000000000 R!
b0000000000000000000000000000000000000000000000000000000000000000 T!
b0000000000000000000000000000000000000000000000000000000000000000 V!
b0000000000000000000000000000000000000000000000000000000000000000 X!
b0000000000000000000000000000000000000000000000000000000000000000 Z!
b0000000000000000000000000000000000000000000000000000000000000000 \!
b0000000000000000000000000000000000000000000000000000000000000000 ^!
b0000000000000000000000000000000000000000000000000000000000000000 `!
b0000000000000000000000000000000000000000000000000000000000000000 b!
b0000000000000000000000000000000000000000000000000000000000000000 d!
b0000000000000000000000000000000000000000000000000000000000000000 f!
b0000000000000000000000000000000000000000000000000000000000000000 h!
b0000000000000000000000000000000000000000000000000000000000000000 j!
b0000000000000000000000000000000000000000000000000000000000000000 l!
b0000000000000000000000000000000000000000000000000000000000000000 n!
b0000000000000000000000000000000000000000000000000000000000000000 p!
b0000000000000000000000000000000000000000000000000000000000000000 r!
b0000000000000000000000000000000000000000000000000000000000000000 t!
b0000000000000000000000000000000000000000000000000000000000000000 v!
b0000000000000000000000000000000000000000000000000000000000000000 x!
b0000000000000000000000000000000000000000000000000000000000000000 z!
b0000000000000000000000000000000000000000000000000000000000000000 |!
b0000000000000000000000000000000000000000000000000000000000000000 ~!
b0000000000000000000000000000000000000000000000000000000000000000 ""
b0000000000000000000000000000000000000000000000000000000000000000 $"
b00000000000000000000000000000000 &"
0'"
1("
0)"
b0000000000000000000000000000000000000000000000000000000000000000 *"
b0000000000000000000000000000000000000000000000000000000000000000 ,"
0."
1/"
b00000000000000000000000001000000 0"
b00000000000000000000000000000000 1"
b0000000000000000000000000000000000000000000000000000000000000000 2"
b0000000000000000000000000000000000000000000000000000000000000000 4"
b0000000000000000000000000000000000000000000000000000000000000000 6"
b0000000000000000000000000000000000000000000000000000000000000000 8"
0:"
0;"
b00000 <"
b0000000000000000000000000000000000000000000000000000000000000000 ="
#1
b00000000000000000000000000100000 &"
1'"
#2
0'"
0("
#3
b0000000000000000000000000000000000000000000000000000000000000100 #
b0000000000000000000000000000000000000000000000000000000000001000 %
b00110 (
b00000000000100110000001100010011 +
b00001 .
b00110 4
b0000000000000000000000000000000000000000000000000000000000000001 :
b0000000000000000000000000000000000000000000000000000000000000001 A
b0000000000000000000000000000000000000000000000000000000000000100 F
b0000000100 J
b0000000000000000000000000000000000000000000000000000000000000001 7!
b0000000000000000000000000000000000000000000000000000000000000110 9!
b0000000000000000000000000000000000000000000000000000000000000110 ;!
b0000000000000000000000000000000000000000000000110000100000000000 =!
b0000000000000000000000000000000000000000000100110000000000000000 ?!
1'"
#4
0'"
#5
b0000000000000000000000000000000000000000000000000000000000001000 #
b0000000000000000000000000000000000000000000000000000000000001100 %
b00000000011100110000001010110011 +
1-
b00111 .
b00101 4
b001000000000 5
b0000000000000000000000000000000000000000000000000000000000000000 :
b0000000000000000000000000000000000000000000000000000000000000000 A
b0000000000000000000000000000000000000000000000000000000000001000 F
b0000001000 J
b001000000000 K
b0110011 S
0V
1X
0b
1o
b0000000000000000000000000000000000000000000000000000000000000111 7!
b0000000000000000000000000000000000000000000000000000000000000101 9!
b0000000000000000000000000000000000000000000000000000100000000100 ;!
b0000000000000000000000000000000000000000000000110000100000000110 =!
b0000000000000000000000000000000000000000011100110000000000000000 ?!
0A!
1'"
#6
0'"
#7
b0000000000000000000000000000000000000000000000000000000000001100 #
b0000000000000000000000000000000000000000000000000000000000010000 %
b01010 (
b00000000010101010010010000100011 +
b00101 .
03
b01000 4
b000000001000 5
b000000000000000 6
b00000000010 8
b0000000000000000000000000000000000000000000000000000000000001000 :
b0000000000000000000000000000000000000000000000000000000000001000 A
b0000000000000000000000000000000000000000000000000000000000001100 F
b0000001100 J
b000000001000 K
0M
b000000000000000 N
b00000000010 O
b0100011 S
b010 T
0X
1^
0o
1/!
b0000000000000000000000000000000000000000000000000000000000000101 7!
b0000000000000000000000000000000000000000000000000000000000001000 9!
b0000000000000000000000000000000000000000000000000000000000001000 ;!
b0000000000000000000000000000000000000000000001010010100000000100 =!
b0000000000000000000000000000000000000000010101010010000000000000 ?!
1'"
#8
0'"
#9
b0000000000000000000000000000000000000000000000000000000000010000 #
b0000000000000000000000000000000000000000000000000000000000010100 %
b00000 (
b00000000000000000000000000000000 +
0-
b00000 .
13
b00000 4
b000000000000 5
b00000000000 8
b0000000000000000000000000000000000000000000000000000000000000000 :
b0000000000000000000000000000000000000000000000000000000000000000 A
b0000000000000000000000000000000000000000000000000000000000010000 F
b0000010000 J
b000000000000 K
1M
b00000000000 O
b0000000 S
b000 T
0^
0/!
b0000000000000000000000000000000000000000000000000000000000000000 7!
b0000000000000000000000000000000000000000000000000000000000000000 9!
b0000000000000000000000000000000000000000000000000000000000000000 ;!
b0000000000000000000000000000000000000000000000000000000000000000 =!
b0000000000000000000000000000000000000000000000000000000000000000 ?!
1'"
#10
0'"
#11
b0000000000000000000000000000000000000000000000000000000000010100 #
b0000000000000000000000000000000000000000000000000000000000011000 %
b0000000000000000000000000000000000000000000000000000000000010100 F
b0000010100 J
1'"
#12
0'"
#13
b0000000000000000000000000000000000000000000000000000000000011000 #
b0000000000000000000000000000000000000000000000000000000000011100 %
b0000000000000000000000000000000000000000000000000000000000011000 F
b0000011000 J
1'"
#14
0'"
#15
b0000000000000000000000000000000000000000000000000000000000011100 #
b0000000000000000000000000000000000000000000000000000000000100000 %
b0000000000000000000000000000000000000000000000000000000000011100 F
b0000011100 J
1'"
#16
0'"
#17
b0000000000000000000000000000000000000000000000000000000000100000 #
b0000000000000000000000000000000000000000000000000000000000100100 %
b0000000000000000000000000000000000000000000000000000000000100000 F
b0000100000 J
1'"
#18
0'"
#19
b0000000000000000000000000000000000000000000000000000000000100100 #
b0000000000000000000000000000000000000000000000000000000000101000 %
b0000000000000000000000000000000000000000000000000000000000100100 F
b0000100100 J
1'"
