$version Generated by VerilatedVcd $end
$date Sun Jan  1 19:36:07 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 9 id_ebreak_o $end
  $var wire  1 8 id_ecall_o $end
  $var wire  1 7 id_ilegl_instr_o $end
  $var wire 64 5 id_imm_o [63:0] $end
  $var wire  1 : id_mret_o $end
  $var wire 12 0 id_opcode_info_o [11:0] $end
  $var wire  1 . id_rd_en_o $end
  $var wire  5 / id_rd_idx_o [4:0] $end
  $var wire  1 ( id_rs1_en_o $end
  $var wire  5 ) id_rs1_idx_o [4:0] $end
  $var wire 64 1 id_rs1_rdata_o [63:0] $end
  $var wire  1 * id_rs2_en_o $end
  $var wire  5 + id_rs2_idx_o [4:0] $end
  $var wire 64 3 id_rs2_rdata_o [63:0] $end
  $var wire 32 ' instr_i [31:0] $end
  $var wire  1 , rf_rs1_rdata_i $end
  $var wire  1 - rf_rs2_rdata_i $end
  $scope module id $end
   $var wire  3 = fun3 [2:0] $end
   $var wire  7 @ fun7 [6:0] $end
   $var wire  1 9 id_ebreak_o $end
   $var wire  1 8 id_ecall_o $end
   $var wire  1 7 id_ilegl_instr_o $end
   $var wire 64 5 id_imm_o [63:0] $end
   $var wire  1 : id_mret_o $end
   $var wire 12 0 id_opcode_info_o [11:0] $end
   $var wire  1 . id_rd_en_o $end
   $var wire  5 / id_rd_idx_o [4:0] $end
   $var wire  1 ( id_rs1_en_o $end
   $var wire  5 ) id_rs1_idx_o [4:0] $end
   $var wire 64 1 id_rs1_rdata_o [63:0] $end
   $var wire  1 * id_rs2_en_o $end
   $var wire  5 + id_rs2_idx_o [4:0] $end
   $var wire 64 3 id_rs2_rdata_o [63:0] $end
   $var wire 32 ' instr_i [31:0] $end
   $var wire  7 ; opcode [6:0] $end
   $var wire  5 < rd [4:0] $end
   $var wire  1 , rf_rs1_rdata_i $end
   $var wire  1 - rf_rs2_rdata_i $end
   $var wire  5 > rs1 [4:0] $end
   $var wire  5 ? rs2 [4:0] $end
   $var wire  1 Z rv64_add $end
   $var wire  1 M rv64_addi $end
   $var wire  1 N rv64_addiw $end
   $var wire  1 [ rv64_addw $end
   $var wire  1 C rv64_alu $end
   $var wire  1 A rv64_alu_imm $end
   $var wire  1 B rv64_alu_imm_w $end
   $var wire  1 D rv64_alu_w $end
   $var wire  1 h rv64_and $end
   $var wire  1 Y rv64_andi $end
   $var wire  1 K rv64_auipc $end
   $var wire 64 *! rv64_b_imm [63:0] $end
   $var wire  1 i rv64_beq $end
   $var wire  1 l rv64_bgt $end
   $var wire  1 n rv64_bgtu $end
   $var wire  1 k rv64_blt $end
   $var wire  1 m rv64_bltu $end
   $var wire  1 j rv64_bne $end
   $var wire  1 E rv64_branch $end
   $var wire  1 } rv64_csrrc $end
   $var wire  1 "! rv64_csrrci $end
   $var wire  1 | rv64_csrrs $end
   $var wire  1 !! rv64_csrrsi $end
   $var wire  1 { rv64_csrrw $end
   $var wire  1 ~ rv64_csrrwi $end
   $var wire  1 $ rv64_ebreak $end
   $var wire  1 # rv64_ecall $end
   $var wire 64 &! rv64_i_imm [63:0] $end
   $var wire 64 % rv64_imm [63:0] $end
   $var wire  1 E rv64_imm_sel_b $end
   $var wire  1 0! rv64_imm_sel_i $end
   $var wire  1 F rv64_imm_sel_j $end
   $var wire  1 I rv64_imm_sel_s $end
   $var wire  1 1! rv64_imm_sel_u $end
   $var wire 64 ,! rv64_j_imm [63:0] $end
   $var wire  1 F rv64_jal $end
   $var wire  1 G rv64_jalr $end
   $var wire  1 o rv64_lb $end
   $var wire  1 s rv64_lbu $end
   $var wire  1 r rv64_ld $end
   $var wire  1 p rv64_lh $end
   $var wire  1 t rv64_lhu $end
   $var wire  1 H rv64_load $end
   $var wire  1 J rv64_lui $end
   $var wire  1 q rv64_lw $end
   $var wire  1 u rv64_lwu $end
   $var wire  1 z rv64_mret $end
   $var wire  1 %! rv64_need_rd $end
   $var wire  1 #! rv64_need_rs1 $end
   $var wire  1 $! rv64_need_rs2 $end
   $var wire  1 g rv64_or $end
   $var wire  1 X rv64_ori $end
   $var wire 64 (! rv64_s_imm [63:0] $end
   $var wire  1 v rv64_sb $end
   $var wire  1 y rv64_sd $end
   $var wire  1 w rv64_sh $end
   $var wire  1 ^ rv64_sll $end
   $var wire  1 O rv64_slli $end
   $var wire  1 P rv64_slliw $end
   $var wire  1 _ rv64_sllw $end
   $var wire  1 ` rv64_slt $end
   $var wire  1 Q rv64_slti $end
   $var wire  1 a rv64_sltu $end
   $var wire  1 R rv64_sltui $end
   $var wire  1 e rv64_sra $end
   $var wire  1 V rv64_srai $end
   $var wire  1 W rv64_sraiw $end
   $var wire  1 f rv64_sraw $end
   $var wire  1 c rv64_srl $end
   $var wire  1 T rv64_srli $end
   $var wire  1 U rv64_srliw $end
   $var wire  1 d rv64_srlw $end
   $var wire  1 I rv64_store $end
   $var wire  1 \ rv64_sub $end
   $var wire  1 ] rv64_subw $end
   $var wire  1 x rv64_sw $end
   $var wire  1 L rv64_system $end
   $var wire 64 .! rv64_u_imm [63:0] $end
   $var wire  1 b rv64_xor $end
   $var wire  1 S rv64_xori $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b0000000000000000000000000000000000000000000000000000000000000000 %
b00000000000000000000000000000000 '
0(
b00000 )
0*
b00000 +
0,
0-
0.
b00000 /
b000000000000 0
b0000000000000000000000000000000000000000000000000000000000000000 1
b0000000000000000000000000000000000000000000000000000000000000000 3
b0000000000000000000000000000000000000000000000000000000000000000 5
07
08
09
0:
b0000000 ;
b00000 <
b000 =
b00000 >
b00000 ?
b0000000 @
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
0K
0L
0M
0N
0O
0P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0~
0!!
0"!
1#!
0$!
1%!
b0000000000000000000000000000000000000000000000000000000000000000 &!
b0000000000000000000000000000000000000000000000000000000000000000 (!
b0000000000000000000000000000000000000000000000000000000000000000 *!
b0000000000000000000000000000000000000000000000000000000000000000 ,!
b0000000000000000000000000000000000000000000000000000000000000000 .!
00!
01!
#1
#2
#3
#4
#5
#6
#7
#8
#9
#10
#11
#12
#13
#14
#15
#16
#17
#18
#19
